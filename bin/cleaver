#!/usr/bin/env node

var path = require('path');
var fs = require('fs');
var program = require('commander');
var Cleaver;

/**
 * Helper function to use the cleaver API to create and save a new
 * presentation
 */
function createAndSave(file) {
  fs.readFile(file, 'utf-8', function (err, contents) {
    var presentation = new Cleaver(contents, path.resolve(path.dirname(file)));
    var promise = presentation.run();

    promise
      .then(function (product) {
        var outputFile = presentation.metadata.output || path.basename(file, '.md') + '-cleaver.html';
        fs.writeFile(outputFile, product);
      })
      .fail(function (err) {
        process.stderr.write('!! ' + err.message + '\n');
        if (program.debug) {
          process.stderr.write(err.stack);
        }
        process.exit(1);
      });
  });
}

program
  .version(require('../package.json').version)
  .usage('[command] [file]');

program
  .command('watch')
  .description('Watch for changes on markdown file')
  .action(function () {
    var file = program.args[0];
    createAndSave(file);

    console.log('Watching for changes on ' + file + '. Ctrl-C to abort.');
    fs.watchFile(file, { persistent: true, interval: 100 }, function () {
      console.log('Rebuilding: ' + new Date());
      createAndSave(file);
    });
  });

program
  .option('--debug', 'Enable debug output');

program.parse(process.argv);

if (!program.args.length) {
  program.help();
} else {
  /**
   * Enable debugging
   *
   * For finer-tuned debugging you can ignore the --debug flag and
   * instead use the DEBUG environment variable that the `debug` module
   * reads automatically.
   *
   * $ DEBUG=[cleaver,helper] cleaver path/to/presentation.md
   */
  if (program.debug) {
    process.env.DEBUG = '*';
  }

  // Load cleaver with the new ENV for debugging
  // TODO: This seems a little janky, maybe handle this in lib/
  Cleaver = require('../');
  createAndSave(program.args[0]);
}
